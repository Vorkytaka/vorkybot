import 'dart:math';

import 'package:drift/drift.dart';
import 'package:teledart/model.dart';

import '../utils/plural.dart';
import '../utils/telegram.dart';
import 'models/models.dart';

final class PGame {
  final PGameRepository _repository;
  final Random _random = Random();

  PGame({
    required PGameRepository repository,
  }) : _repository = repository;

  Future<void> register(TeleDartMessage message) async {
    if (message.chat.type != Chat.typeGroup &&
        message.chat.type != Chat.typeSuperGroup) {
      await message.reply(
        '–û—à–∏–±–∫–∞: –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.',
        withQuote: true,
      );
      return;
    }

    final user = message.from;
    if (user == null) {
      await message.reply(
        '–û—à–∏–±–∫–∞: –ù–µ –º–æ–≥—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
        withQuote: true,
      );
      return;
    }

    final result = await _repository.registerUser(user, message.chat);

    switch (result) {
      case RegistrationResult.success:
        await message.reply(
          '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∏–≥—Ä—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!',
          withQuote: true,
        );
        break;
      case RegistrationResult.alreadyRegistered:
        await message.reply(
          '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∏–≥—Ä—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ.',
          withQuote: true,
        );
        break;
      case RegistrationResult.error:
        await message.reply(
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–¥–∏—Ç–µ –Ω–∞—Ö—É–π.',
          withQuote: true,
        );
        break;
    }
  }

  Future<void> play(TeleDartMessage message) async {
    if (!message.isGroupChat()) {
      return;
    }

    final user = message.from;
    if (user == null) {
      await message.reply(
        '–û—à–∏–±–∫–∞: –ù–µ –º–æ–≥—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
        withQuote: true,
      );
      return;
    }

    // Check if the game was already played today in this chat
    final lastPlayDate = await _repository.getLastPlayDate(message.chat.id);
    final now = DateTime.now().toUtc();
    if (lastPlayDate != null &&
        lastPlayDate.year == now.year &&
        lastPlayDate.month == now.month &&
        lastPlayDate.day == now.day) {
      final lastWinner = await _repository.getLastWinner(message.chat.id);
      final buffer = StringBuffer();
      buffer.write('–°–µ–≥–æ–¥–Ω—è –ø–∏–¥–æ—Ä –¥–Ω—è —É–∂–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.');
      if (lastWinner != null) {
        buffer.write(' –≠—Ç–æ –±—ã–ª ${lastWinner.displayName}.');
      }
      buffer.write(' –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞!');
      await message.reply(
        buffer.toString(),
        withQuote: true,
      );
      return;
    }

    final registeredUsers =
        await _repository.getRegisteredUsers(message.chat.id);
    if (registeredUsers.isEmpty) {
      await message.reply(
        '–û—à–∏–±–∫–∞: –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–≥—Ä—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ.',
        withQuote: true,
      );
      return;
    }

    final randomUser = registeredUsers[_random.nextInt(registeredUsers.length)];
    await _repository.incrementWins(randomUser.id, message.chat.id);

    for (final text in [
      'üì° –ê–∫—Ç–∏–≤–∏—Ä—É—é —Å–∏—Å—Ç–µ–º—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∏–¥–æ—Ä–∞... üì°',
      'üîç –ü–∏–¥–æ—Ä –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è... üîç',
      'üßë –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞... üßë‚Äçüî¨',
      'üëÄ –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏... üëÄ',
      'üèÖ –ü–∏–¥–æ—Ä –Ω–∞–π–¥–µ–Ω! –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ —ç—Ç–æ ${randomUser.displayName}! üèÖ',
    ]) {
      await message.reply(text);
      await Future.delayed(Duration(milliseconds: 500));
    }
  }

  Future<void> results(TeleDartMessage message) async {
    if (message.chat.type != Chat.typeGroup &&
        message.chat.type != Chat.typeSuperGroup) {
      await message.reply(
        '–û—à–∏–±–∫–∞: –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.',
        withQuote: true,
      );
      return;
    }

    final results = await _repository.getResults(message.chat.id);
    if (results.isEmpty) {
      await message.reply(
        '–ö–∞–∂–µ—Ç—Å—è –∑–¥–µ—Å—å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–∏–¥–æ—Ä–∞.',
        withQuote: true,
      );
      return;
    }

    final buffer = StringBuffer();
    for (var i = 0; i < results.length; i++) {
      final user = results[i].$1;
      final count = results[i].$2;
      final place = i + 1;
      buffer.writeln(
        '$place. ${user.displayName} –±—ã–ª –ü–ò–î–û–†–û–ú $count ${getRussianPluralForm(count, '—Ä–∞–∑', '—Ä–∞–∑–∞', '—Ä–∞–∑')}',
      );
    }
    final resultList = buffer.toString();
    final title =
        '–¢–æ–ø ${results.length} ${getRussianPluralForm(results.length, '–ü–ò–î–û–†–ê–°–ê', '–ü–ò–î–û–†–ê', '–ü–ò–î–û–†–û–í')} –≤ —ç—Ç–æ–º —á–∞—Ç–µ:';
    await message.reply(
      '$title\n\n$resultList',
      withQuote: true,
    );
  }
}

enum RegistrationResult {
  success,
  alreadyRegistered,
  error,
}

abstract interface class PGameRepository {
  Future<RegistrationResult> registerUser(User user, Chat chat);

  Future<List<UserEntity>> getRegisteredUsers(int chatId);

  Future<void> incrementWins(int userId, int chatId);

  Future<List<(UserEntity, int)>> getResults(int chatId);

  /// Returns the last play date (UTC) for the given chat, or null if never played.
  Future<DateTime?> getLastPlayDate(int chatId);

  Future<UserEntity?> getLastWinner(int chatId);
}
